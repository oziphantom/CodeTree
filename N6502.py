g_branchOpCodes = (0x90, 0xB0, 0xF0, 0x30, 0xD0, 0x10, 0x50, 0x70, 0x4c, 0x6c, 0x20)
g_modifyAOpCodes = {0x69, 0x65, 0x75, 0x6d, 0x7d, 0x79, 0x61, 0x71, 0x29, 0x25, 0x35, 0x2d, 0x3d,
                    0x39, 0x21, 0x31, 0x0a, 0x06, 0x16, 0x0e, 0x1e, 0x49, 0x45, 0x55, 0x4d, 0x5d,
                    0x59, 0x41, 0x51, 0xa9, 0xa5, 0xb5, 0xad, 0xb9, 0xbd, 0xa1, 0xb1, 0x4a, 0x09,
                    0x05, 0x15, 0x0d, 0x1d, 0x19, 0x01, 0x11, 0x68, 0x2a, 0x6a, 0xe9, 0xe5, 0xf5,
                    0xed, 0xfd, 0xf9, 0xe1, 0xf1, 0x8a, 0x98}
g_modifyMemoryOpcodes = {0x06, 0x16, 0x0e, 0x1e, 0xc6, 0xd6, 0xce, 0xde, 0xe6, 0xf6, 0xee, 0xfe,
                         0x46, 0x56, 0x4e, 0x5e, 0x26, 0x36, 0x2e, 0x3e, 0x66, 0x76, 0x6e, 0x7e,
                         0x85, 0x95, 0x8d, 0x9d, 0x99, 0x81, 0x91, 0x86, 0x96, 0x8e, 0x84, 0x94,
                         0x8c}
g_readMemoryOpcodes = { 0x01, 0x05, 0x06, 0x0d, 0x0e, 0x11, 0x15, 0x16, 0x19, 0x1d, 0x1e, 0x21,
                        0x25, 0x2D, 0x31, 0x35, 0x39, 0x3d, 0x41, 0x45, 0x4d, 0x5d, 0x51, 0x55,
                        0x59, 0x61, 0x65, 0x6c, 0x6d, 0x71, 0x75, 0x79, 0x7d, 0xa1, 0xa4, 0xa5,
                        0xa6, 0xac, 0xad, 0xae, 0xb4, 0xbc, 0xbe, 0xb1, 0xb5, 0xb6, 0xb9, 0xbd,
                        0xc5, 0xcd, 0xd5, 0xdd, 0xd9, 0xc1, 0xc4, 0xcc, 0xd1, 0xe1, 0xe4, 0xe5,
                        0xec, 0xed, 0xf1, 0xf5, 0xf9, 0xfd}
g_modifyXOpCodes = {0xca, 0xe8, 0xa2, 0xa6, 0xb6, 0xae, 0xbe, 0xaa, 0xba}
g_modifyYOpCodes = {0x88, 0xc8, 0xa0, 0xa4, 0xb4, 0xac, 0xbc, 0xa8}
g_CC01Lengths = (2, 2, 2, 3, 2, 2, 3, 3)
g_CC10Lengths = (2, 2, 1, 3, 1, 2, 1, 3)
g_CC00Lenghts = (2, 2, 1, 3, 1, 2, 1, 3)
g_singleByteOpcodes = {0x08, 0x18, 0x28, 0x38, 0x48, 0x08, 0x58, 0x68, 0x78, 0x88, 0x98, 0xA8, 0xB8,
                       0xC8, 0xD8, 0xE8, 0xF8, 0x8a, 0x9a, 0xaa, 0xba, 0xca, 0xea, 0x00, 0x40, 0x60}



def doesOpcodeBrachorJump(opcode):
    if opcode in g_branchOpCodes:
        return True
    return False

def isOpcodeBranch(opcode):
    if opcode in (0x4c,0x6c,0x20):
        return False
    if opcode in g_branchOpCodes:
        return True
    return False

def isOpcodeJump(opcode):
    if opcode in (0x4c,0x6c):
        return True
    return False

def isOpcodeJSR(opcode):
    if opcode == 0x20:
        return True
    return False

def doesOpcodeTrashA(opcode):
    if opcode in g_modifyAOpCodes:
        return True
    return False

def doesOpcodeTrashX(opcode):
    if opcode in g_modifyXOpCodes:
        return True
    return False

def doesOpcodeTrashY(opcode):
    if opcode in g_modifyYOpCodes:
        return True
    return False

def doesOpcodeTrashMemory(opcode):
    if opcode in g_modifyMemoryOpcodes:
        return True
    return False

def doesOpcodeReturn(opcode):
    if opcode in (0x60, 0x40):
        return True
    return False

def getOpcodeLength(opcode):
    c = opcode & 0x3
    b = (opcode & 0x1C) >> 2
    if opcode in (0x4c,0x6c,0x20):
        return 3
    if opcode in g_branchOpCodes:
        return 2
    if opcode in g_singleByteOpcodes:
        return 1
    if c == 0:
        return g_CC00Lenghts[b]
    elif c == 1:
        return g_CC01Lengths[b]
    elif c == 2:
        return g_CC10Lengths[b]
    else:
        print("unknown opcode {:2X}".format(opcode))
        return 1

def calculateNewPCFromBranch(PC, param):
    if param > 127: # negative
        param = param-256
    return PC+2+param

def calculate16BitAddr(paramLo, paramHi):
    return paramLo+(paramHi*256)

def doesOpcodeReadMemory(opcode):
    if opcode in g_readMemoryOpcodes:
        return True
    return False

def getAddressUsedByOpcode(opcode, param1, param2):
    count = getOpcodeLength(opcode)
    if count == 2:
        return param1
    if count == 3:
        return calculate16BitAddr(param1, param2)
    return -1

def doesOpcodeReadVector(opcode):
    if (opcode & 0xF) == 0x1:
        return True
    if opcode == 0x6c: # JMP (XXXX)
        return True
    return False

def doesOpcodeIndexOnX(opcode):
    c = opcode & 0x3
    b = (opcode & 0x1C) >> 2
    if opcode in (0x4c,0x6c,0x20):
        return False
    if opcode in g_branchOpCodes:
        return False
    if opcode in g_singleByteOpcodes:
        return False
    if c == 0:
        return False
    elif c == 1:
        if b == 0 or \
            b == 5 or \
            b == 7:
            return True
    elif c == 2:
        if b == 5 or \
            b == 7:
            return True
    else:
        print("unknown opcode {:2X}".format(opcode))
        return False